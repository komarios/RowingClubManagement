#
# $Id: rowing.properties,v 1.6 2003/02/21 04:55:57 rphall Exp $
#

# JNDI location for various factories
rowingsession.home=@jndi-context-root@/RowingSession
participant.home=@jndi-context-root@/Participant

# SimpleDateFormat for dates expected by the database
sessionset.sql.dateformat.oracle=yyyy-MM-dd HH:mm:ss
sessionset.sql.dateformat.mysql=yyyy-MM-dd HH:mm:ss

# Select id's of all rowing sessions ordered by date
sessionset.sql.01.oracle=SELECT rowing_id FROM RowingSession ORDER BY rowing_date
sessionset.sql.01.mysql=SELECT rowing_id FROM RowingSession ORDER BY rowing_date

# Select all rowing sessions ordered by date
sessionset.sql.01a.oracle=SELECT * FROM RowingSession ORDER BY rowing_date
sessionset.sql.01a.mysql=SELECT * FROM RowingSession ORDER BY rowing_date

# Select a specific session ID
sessionset.sql.02.oracle=SELECT rowing_id FROM RowingSession WHERE rowing_id = ?
sessionset.sql.02.mysql=SELECT rowing_id FROM RowingSession WHERE rowing_id = ?

# Sessions within a date range
sessionset.sql.03.oracle=SELECT * FROM RowingSession WHERE rowing_date >= TO_DATE( ?,'YYYY-MM-DD HH24:MI:SS' ) and rowing_date <= TO_DATE( ?,'YYYY-MM-DD HH24:MI:SS' ) ORDER BY rowing_date
sessionset.sql.03.mysql=SELECT * FROM RowingSession WHERE rowing_date >= ? and rowing_date <=  ? ORDER BY rowing_date

# Inserts a session
sessionset.sql.04.oracle=INSERT INTO RowingSession(rowing_id,rowing_date,rowing_level,rowing_type,rowing_state) VALUES ( ?, TO_DATE( ?,'YYYY-MM-DD HH24:MI:SS'), ?, ?, ? )
sessionset.sql.04.mysql=INSERT INTO RowingSession(rowing_id,rowing_date,rowing_level,rowing_type,rowing_state) VALUES ( ?, ?, ?, ?, ? )

# Deletes a session
sessionset.sql.05.oracle=delete FROM RowingSession WHERE rowing_id = ?
sessionset.sql.05.mysql=delete FROM RowingSession WHERE rowing_id = ?

# Loads a session
sessionset.sql.06.oracle=SELECT * FROM RowingSession WHERE rowing_id = ?
sessionset.sql.06.mysql=SELECT * FROM RowingSession WHERE rowing_id = ?

# Stores a session
sessionset.sql.07.oracle=update RowingSession set rowing_date = TO_DATE( ?,'YYYY-MM-DD HH24:MI:SS'), rowing_level = ?, rowing_type = ?, rowing_state = ? WHERE rowing_id = ?
sessionset.sql.07.mysql=update RowingSession set rowing_date = ?, rowing_level = ?, rowing_type = ?, rowing_state = ? WHERE rowing_id = ?

# Updates and selects the next id for a rowing session
sessionset.sql.08.oracle=SELECT clra_rowing.NEXTVAL FROM DUAL
sessionset.sql.08a.oracle=SELECT clra_rowing.CURRVAL FROM DUAL
sessionset.sql.08.mysql=UPDATE ClraSequence SET id = LAST_INSERT_ID(id + 1) WHERE name = 'RowingSession'
sessionset.sql.08a.mysql=SELECT LAST_INSERT_ID()

# Selects ParticipantSnapshot specified by participantId
participant.sql.01.oracle=SELECT * FROM Participant WHERE participant_id = ?
participant.sql.01.mysql=SELECT * FROM Participant WHERE participant_id = ?

# Selects Participant2Snapshot data associated with a rowing session
participant.sql.02.oracle=                                                    \
 SELECT                                                                       \
   b.member_id, b.rowing_id, b.participant_id, b.requested,                   \
   b.replaces_id, b.initial_seat, b.final_seat, b.attendance,                 \
   c.name_first, c.name_middle, c.name_last, c.name_suffix                    \
 FROM                                                                         \
   Participant b, Member c                                                    \
 WHERE                                                                        \
   b.rowing_id = ?                                                            \
   AND b.member_id = c.member_id                                              \
 ORDER BY name_last
participant.sql.02.mysql=                                                     \
 SELECT                                                                       \
   b.member_id, b.rowing_id, b.participant_id, b.requested,                   \
   b.replaces_id, b.initial_seat, b.final_seat, b.attendance,                 \
   c.name_first, c.name_middle, c.name_last, c.name_suffix                    \
 FROM                                                                         \
   Participant b, Member c                                                    \
 WHERE                                                                        \
   b.rowing_id = ?                                                            \
   AND b.member_id = c.member_id                                              \
 ORDER BY name_last

# Selects ParticipantSnapshot specified by memberId and rowingId
participant.sql.03.oracle=SELECT * FROM Participant WHERE member_id = ? AND rowing_id = ?
participant.sql.03.mysql=SELECT * FROM Participant WHERE member_id = ? AND rowing_id = ?

# Selects participant id's of all participants
participant.sql.04.oracle=SELECT participant_id FROM Participant
participant.sql.04.mysql=SELECT participant_id FROM Participant

# Inserts a participant constrained by member, rowing info
#participant.sql.05.oracle=                                                   \
# INSERT INTO Participant(                                                    \
#     member_id, participant_id, requested, rowing_id,                        \
#     replaces_id, initial_seat, final_seat, attendance )                     \
#   SELECT                                                                    \
#     ?, ?, ?, rowing_id,                                                     \
#     null, null, null, null                                                  \
#   FROM                                                                      \
#     RowingSession                                                           \
#   WHERE                                                                     \
#     rowing_id = ? AND rowing_state = ?
#
participant.sql.05.oracle=                                                   \
 INSERT INTO Participant(                                                    \
     member_id, participant_id, requested, rowing_id,                        \
     replaces_id, initial_seat, final_seat, attendance )                     \
 VALUES(                                                                     \
     ?, ?, ?, ?,                                                             \
     null, null, null, null)
participant.sql.05.mysql=                                                    \
 INSERT INTO Participant(                                                    \
     member_id, participant_id, requested, rowing_id,                        \
     replaces_id, initial_seat, final_seat, attendance )                     \
 VALUES(                                                                     \
     ?, ?, ?, ?,                                                             \
     null, null, null, null)

# Deletes a participant row
participant.sql.06.oracle=DELETE FROM Participant WHERE participant_id = ?
participant.sql.06.mysql=DELETE FROM Participant WHERE participant_id = ?

# Stores a participant row
participant.sql.07.oracle=UPDATE Participant SET requested = ?, initial_seat = ?, final_seat = ?, attendance = ? WHERE participant_id = ?
participant.sql.07.mysql=UPDATE Participant SET requested = ?, initial_seat = ?, final_seat = ?, attendance = ? WHERE participant_id = ?

# Gets the next participant id FROM the participant sequence
participant.sql.08.oracle=SELECT clra_participant.NEXTVAL FROM DUAL
participant.sql.08a.oracle=SELECT clra_participant.CURRVAL FROM DUAL
participant.sql.08.mysql=UPDATE ClraSequence SET id = LAST_INSERT_ID(id + 1) WHERE name = 'Participant'
participant.sql.08a.mysql=SELECT LAST_INSERT_ID()

# MySQL 3.23.46 lacks UNION's and sub-SELECT's. As a workaround (valid also
# for Oracle), all the work is done in Java. See the RowingDBRead class.
#
# Step 1: select all rowing sessions regardless of whether a member is enrolled
enrollment.sql.01.oracle=                                                     \
SELECT                                                                        \
   a.rowing_id, a.rowing_date, a.rowing_level, a.rowing_type, a.rowing_state  \
 FROM                                                                         \
   RowingSession a                                                            \
 WHERE                                                                        \
   a.rowing_date >= TO_DATE( ?, 'YYYY-MM-DD HH24:MI:SS' )                     \
   AND a.rowing_date <= TO_DATE( ?, 'YYYY-MM-DD HH24:MI:SS' )                 \
 ORDER BY                                                                     \
   a.rowing_date
enrollment.sql.01.mysql=                                                      \
SELECT                                                                        \
   a.rowing_id, a.rowing_date, a.rowing_level, a.rowing_type, a.rowing_state  \
 FROM                                                                         \
   RowingSession a                                                            \
 WHERE                                                                        \
   a.rowing_date >= ?                                                         \
   AND a.rowing_date <= ?                                                     \
 ORDER BY                                                                     \
   a.rowing_date
#
# Step 2: select rowing, participation data for a member by date range
enrollment.sql.02.oracle=                                                     \
SELECT                                                                        \
   a.rowing_id, a.rowing_date, a.rowing_level, a.rowing_type, a.rowing_state, \
   b.participant_id, b.requested, b.replaces_id, b.initial_seat,              \
   b.final_seat, b.attendance, b.member_id                                    \
 FROM                                                                         \
   RowingSession a, Participant b                                             \
 WHERE                                                                        \
   b.member_id = ?                                                            \
   AND rowing_date >= TO_DATE( ?, 'YYYY-MM-DD HH24:MI:SS' )                   \
   AND rowing_date <= TO_DATE( ?, 'YYYY-MM-DD HH24:MI:SS' )                   \
   AND a.rowing_id = b.rowing_id
enrollment.sql.02.mysql=                                                      \
SELECT                                                                        \
   a.rowing_id, a.rowing_date, a.rowing_level, a.rowing_type, a.rowing_state, \
   b.participant_id, b.requested, b.replaces_id, b.initial_seat,              \
   b.final_seat, b.attendance, b.member_id                                    \
 FROM                                                                         \
   RowingSession a, Participant b                                             \
 WHERE                                                                        \
   b.member_id = ?                                                            \
   AND rowing_date >= ?                                                       \
   AND rowing_date <= ?                                                       \
   AND a.rowing_id = b.rowing_id                                              \

#
# $Log: rowing.properties,v $
# Revision 1.6  2003/02/21 04:55:57  rphall
# Parameterized deployment-specific properties
#
# Revision 1.5  2003/02/19 22:49:45  rphall
# Removed gratuitous use of CLRA acronym
#
# Revision 1.4  2002/03/24 01:46:35  rphall
# Changed EJB homes to clra-test/Xxx from clra/Xxx
#
