#
# $Id: member.properties,v 1.14 2003/03/10 14:18:16 rphall Exp $
#

# SimpleDateFormat for dates expected by the database
memberset.sql.dateformat.oracle=yyyy-MM-dd HH:mm:ss
memberset.sql.dateformat.mysql=yyyy-MM-dd HH:mm:ss

# Selects all members, orders by last name
memberset.sql.01.oracle=SELECT * FROM Member ORDER BY name_last
memberset.sql.01.mysql=SELECT * FROM Member ORDER BY name_last

# Selects all members with last names greater than or equal to
# a specified String; orders by last name
memberset.sql.02.oracle=SELECT * FROM Member WHERE UPPER(name_last) >= UPPER(?) ORDER BY UPPER(name_last)
memberset.sql.02.mysql=SELECT * FROM Member WHERE name_last >= ? ORDER BY name_last

# Selects all members with last names less than a specified String;
# orders by last name
memberset.sql.03.oracle=SELECT * FROM Member WHERE UPPER(name_last) < UPPER(?) ORDER BY UPPER(name_last)
memberset.sql.03.mysql=SELECT * FROM Member WHERE name_last < ? ORDER BY name_last

# Selects all members with last names greater than or equal to
# a specified lower bound and less than a specified upper bound;
# orders by last name
memberset.sql.04.oracle=SELECT * FROM Member WHERE UPPER(name_last) >= UPPER(?) AND UPPER(name_last) < UPPER(?) ORDER BY UPPER(name_last)
memberset.sql.04.mysql=SELECT * FROM Member WHERE name_last >= ? AND name_last < ? ORDER BY name_last

# Selects a member by account_name (account_name is an alternative key)
memberset.sql.05.oracle=SELECT * FROM Member WHERE UPPER(account_name)=UPPER(?)
memberset.sql.05.mysql=SELECT * FROM Member WHERE account_name = ?

# Selects a member's account_name and roles 
memberset.sql.06.oracle=SELECT a.account_name, b.role FROM Member a, MemberRole b WHERE a.member_id = b.member_id
memberset.sql.06.mysql=SELECT a.account_name, b.role FROM Member a, MemberRole b WHERE a.member_id = b.member_id

# Selects a member's roles 
memberset.sql.07.oracle=SELECT role FROM MemberRole WHERE member_id = ?
memberset.sql.07.mysql=SELECT role FROM MemberRole WHERE member_id = ?

# Selects a member by member_id
memberset.sql.08.oracle=SELECT * FROM Member WHERE member_id = ?
memberset.sql.08.mysql=SELECT * FROM Member WHERE member_id = ?

# Selects a member by account_name
memberset.sql.081.oracle=SELECT * FROM Member WHERE account_name = ?
memberset.sql.081.mysql=SELECT * FROM Member WHERE account_name = ?

# Selects member id's of all members
memberset.sql.09.oracle=SELECT member_id FROM Member
memberset.sql.09.mysql=SELECT member_id FROM Member

# Delete a member by member id
memberset.sql.10.oracle=DELETE FROM Member WHERE member_id=?
memberset.sql.10.mysql=DELETE FROM Member WHERE member_id=?

# Update a member by member id
memberset.sql.11.oracle=UPDATE Member Set account_passwd=?, name_last=?, name_first=?, name_middle=?, name_suffix=?, email=?, telephone_evening=?, telephone_day=?, telephone_other=?, address_street1=?, address_street2=?, address_city=?, address_state=?, address_zip=?, clra_year=?, birthday=TO_DATE(?, 'YYYY-MM-DD HH24:MI:SS'), account_name=?, clra_status=? WHERE member_id=?
memberset.sql.11.mysql=UPDATE Member Set account_passwd=?, name_last=?, name_first=?, name_middle=?, name_suffix=?, email=?, telephone_evening=?, telephone_day=?, telephone_other=?, address_street1=?, address_street2=?, address_city=?, address_state=?, address_zip=?, clra_year=?, birthday=?, account_name=?, clra_status=? WHERE member_id=?

# Store a member
memberset.sql.12.oracle=INSERT INTO Member values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, TO_DATE(?, 'YYYY-MM-DD HH24:MI:SS'))
memberset.sql.12.mysql=INSERT INTO Member values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )

# Update and select the next id for a member
memberset.sql.15.oracle=SELECT clra_member.NEXTVAL FROM DUAL
memberset.sql.15a.oracle=SELECT clra_member.CURRVAL FROM DUAL
memberset.sql.15.mysql=UPDATE ClraSequence SET id = LAST_INSERT_ID(id + 1) WHERE name = 'Member'
memberset.sql.15a.mysql=SELECT LAST_INSERT_ID()

# Inserts MemberRole associated with a member
memberset.sql.16.oracle=INSERT INTO MemberRole(member_id,Role,RoleGroup) values(?, ?, ?)
memberset.sql.16.mysql=INSERT INTO MemberRole(member_id,Role,RoleGroup) values(?, ?, ?)

# Deletes MemberRoles associated with a member
memberset.sql.17.oracle=DELETE FROM MemberRole WHERE member_id = ?
memberset.sql.17.mysql=DELETE FROM MemberRole WHERE member_id = ?

# Checks if an account name is already in use by another member
# (account_name is an alternative key).
memberset.sql.18.oracle=SELECT * FROM Member WHERE UPPER(account_name)=UPPER(?) AND member_id != ?
memberset.sql.18.mysql=SELECT * FROM Member WHERE account_name = ? AND member_id != ?

# JNDI location for various factories
member.home=@jndi-context-root@/MemberEJB

#
# $Log: member.properties,v $
# Revision 1.14  2003/03/10 14:18:16  rphall
# Parameterized member.home
#
# Revision 1.13  2003/02/21 19:12:53  rphall
# Added SQL for checking duplicate user names during editing
#
# Revision 1.12  2003/02/21 04:55:57  rphall
# Parameterized deployment-specific properties
#
# Revision 1.11  2003/02/19 22:49:30  rphall
# Removed gratuitous use of CLRA acronym
#
# Revision 1.10  2003/02/19 12:58:37  rphall
# Added SQL to insert/delete MemberRole rows
#
# Revision 1.9  2003/02/15 04:33:49  rphall
# Changes connected to major revision of MemberBean
#
#

