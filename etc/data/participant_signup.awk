# Creates SQL INSERT script to fill the Participant table of the CLRA database.
# The Participant table is a derived table, built from *existing* entries
# in the Member table and the RowingSession tables. Therefore, this script
# assumes the following:
#
#   Member id's are in the range 1 - MEMBER_MAX (inclusive)
#   Rowing id's are in the range 1 - ROWING_MAX (inclusive)
#
# Current values of MEMBER_MAX and ROWING_MAX are based on entries inserted by
# the "test_member.sql" and "test_rowing.sql" scripts in the ../sql directory.
#
# Data: signups are represented as Participant rows with non-null values of
# member_id, rowing_id and requested_position, and with null values of all other
# Participant columns (i.e. preliminary_seating_id, final_seating_id,
# replaces_id, rowing_status, no_show and charged).
#
# Algorithm: Each rowing session is assigned a predetermined, but apparently
# random number of PORT, STARBOARD, P(S), S(P) and COX participants. The
# pseudo-random numbers are generated by functions that do modulo arithmetic
# member_id and rowing_id. Given the same set of input data in the Member and
# RowingSession tables, these functions should generate the same results each
# time they run.
#
# A member index starts at 1 and continuously loops through all available
# members. A rowing index starts at 1 and continuously loops through all
# available rowing sessions.
#
BEGIN {
  MEMBER_MAX = 306
  ROWING_MAX = 48
  member = 1          # ((member % MEMBER_MAX) + 1 ) is member_id
  rowing = 1          # ((rowing % ROWING_MAX) + 1 ) is rowing_id
  AVG = 41            # Average number of signups per session (4.5 boats)
  LTR_FACTOR = 50     # A 1 in 5 chance a member is a LTR, so bump up AVG
  DONE = LTR_FACTOR * ROWING_MAX
  fmt = "INSERT INTO Participant(rowing_id,member_id,requested_position) values('%d','%d',%s);\n"
  print fmt
  while ( member < DONE ) {
    position = request( member )
    printf( fmt, (rowing%ROWING_MAX)+1, (member%MEMBER_MAX)+1, position)

    member++;
    rowing++;
  }
}

function request(i) {
  sample = i % 29     # One chance in 29 of coxing
  if ( sample == 1 ) return "'COX'";
  else if ( sample % 4 == 0 ) return "'PORT'";
  else if ( sample % 4 == 1 ) return "'STARBOARD'"
  else if ( sample % 4 == 2 ) return "'P(S)'"
  else return "'S(P)'"
}

