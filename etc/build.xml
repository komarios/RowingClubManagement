<!-- ================================================================= -->
<!-- This file is an ANT build script.                                 -->
<!-- ANT is available from http://jakarta.apache.org/ant/              -->
<!--                                                                   -->
<!-- Copyright (c) Carnegie Lake Rowing Association 2002.              -->
<!--     All rights reserved.                                          -->
<!--     Distributed under the GPL license. See doc/COPYING.           -->
<!-- $RCSfile: build.xml,v $                                           -->
<!-- $Date: 2003/03/05 13:57:33 $                                      -->
<!-- $Revision: 1.18 $                                                 -->
<!--                                                                   -->
<!-- ================================================================= -->


<!-- ================================================================= -->
<!-- All directories are relative to the parent dir of this file       -->
<!-- ================================================================= -->
<project name="CLRA" default="app-ear.deploy" basedir="..">


<!-- ================================================================= -->
<!-- Directory locations                                               -->
<!-- ================================================================= -->
<!-- The location of build and deployment configuration files -->
<property name="etc.dir" value="etc"/>

<!-- The location of xml configuration files -->
<property name="etc.xml.dir" value="${etc.dir}/xml"/>

<!-- The directory where source files are stored. -->
<property name="java.source.dir" value="src"/>

<!-- The location of html, jsp and image files -->
<property name="web.dir" value="web"/>

<!-- The location of third-party jar files -->
<property name="jar.lib.dir" value="lib"/>

<!-- The location of third-party type lib defn files -->
<property name="tld.lib.dir" value="lib"/>

<!-- The location for documentation -->
<property name="doc.dir" value="doc"/>

<!-- The directory for binary build products -->
<property name="distrib.dir" value="dist" />

<!-- The branch under various directories where app code is located. -->
<property name="appstem" value="com/clra"/>

<!-- The branch under various directories where test code is located. -->
<property name="teststem" value="test/clra"/>

<!-- Destination for XML code generated by WSDL2Java -->
<property name="wsdl2java.dest" value="${java.source.dir}/${appstem}/xml" />

<!-- Destination for compiled files -->
<property name="javac.dest" value="${distrib.dir}/classes"/>

<!-- Destination for generated jar files -->
<property name="jar.dest" value="${distrib.dir}/lib"/>

<!-- Destination for javadoc generated files -->
<property name="javadoc.dest" value="${distrib.dir}/doc"/>

<!-- Working directory where stuff is assembled -->
<property name="working.dir" value="tmp"/>

<!-- Working directory where the javadoc package-list file is built -->
<property name="packaging.dir" value="${working.dir}/packaging"/>

<!-- Working directory where web archive is assembled -->
<property name="working.war.dir" value="${working.dir}/war" />

<!-- Working directory where ejb jar is assembled -->
<property name="working.ejb.dir" value="${working.dir}/ejb" />

<!-- Working directory where enterprise application jar is assembled -->
<property name="working.ear.dir" value="${working.dir}/ear" />

<!-- Working directory where javadoc web archive is assembled -->
<property name="working.javadoc-war.dir" value="${working.dir}/javadoc-war" />

<!-- Working directory where xml is assembled -->
<property name="working.xml.dir" value="${working.dir}/xml" />

<!-- ================================================================= -->
<!-- Deployment, environment and application properties                -->
<!-- ================================================================= -->
<!-- Deployment-specific properties -->
<property file="${etc.dir}/deploy.properties" />
 
<!-- The shell environment -->
<property name="env" environment="env" />

<!-- The full URL of the JAAS security domain used by the app -->
<property name="deployment.jaas.url"
          value="java:/jaas/${deployment.jaas.domain}" />

<!-- The URL of the membership xml service -->
<property name="xml.member.hostURL"
          value="http://${deployment.xml.member.hostAddrPort}" />

<!-- The path within the xml web context to member services -->
<property name="xml.member.hostPath"
 value="${deployment.xml.contextRoot}/${deployment.xml.member.servicesPath}"/>

<!-- The package to which the xml member targetNamespace is mapped -->
<property name="xml.member.package" value="com.clra.xml" />

<!-- ================================================================= -->
<!-- File names                                                        -->
<!-- ================================================================= -->
<!-- manifest.mf deployment file (before filtering) -->
<property name="manifest.src" value="${etc.dir}/manifest.mf"/>

<!-- xml wsdl member services definition file (before filtering) -->
<property name="xml-member-wsdl.src" value="${etc.xml.dir}/member.wsdl"/>

<!-- xml request headers for the member findAll svc (before filtering) -->
<property name="xml-member-findAll-headers.file"
    value="findAll-request-headers.http"/>

<!-- xml request content for the member findAll svc (before filtering) -->
<property name="xml-member-findAll-content.file"
    value="findAll-request-content.http"/>

<!-- xml service configuration file -->
<property name="xml-server-config.src"
    value="${etc.xml.dir}/server-config.wsdd"/>

<!-- xml web deployment file (before filtering) -->
<property name="xml-web.src" value="${etc.xml.dir}/web.xml"/>

<!-- ejb-jar.xml deployment file -->
<property name="ejb-jar.src" value="${etc.dir}/ejb-jar.xml"/>

<!-- jboss.xml deployment file -->
<property name="jboss.src" value="${etc.dir}/jboss.xml"/>

<!-- The javadoc package-list file for external links -->
<property name="packaging.list" value="${etc.dir}/package-list" />

<!-- Name of the application web archive file -->
<property name="file.app.war-jar"
 value="${deployment.app.nameRoot}-app-${deployment.app.version}.war" />

<!-- Name of the xml web archive file -->
<property name="file.xml.war-jar"
 value="${deployment.app.nameRoot}-xml-${deployment.app.version}.war" />

<!-- Name of the ejb jar file -->
<property name="file.app.ejb-jar"
 value="${deployment.app.nameRoot}-ejb-${deployment.app.version}.jar" />

<!-- Name of the enterprise application jar file -->
<property name="file.app.ear-jar"
 value="${deployment.app.nameRoot}-ear-${deployment.app.version}.jar" />

<!-- Name of the javadoc web archive file -->
<property name="file.javadoc.war-jar"
 value="${deployment.app.nameRoot}-doc.war" />

<!-- Name of the "all-of-it" jar file -->
<property name="file.all-jar"
 value="${deployment.app.nameRoot}-all-${deployment.app.version}.jar" />


<!-- ================================================================= -->
<!-- Initialize variables                                              -->
<!-- ================================================================= -->
<target name="init">
  <tstamp />
</target>

<target name="derived-source" depends="init" >
  <mkdir dir="${distrib.dir}" />
  <mkdir dir="${javac.dest}" />
  <mkdir dir="${javac.dest}/com" />
  <mkdir dir="${javac.dest}/com/clra" />
  <mkdir dir="${javac.dest}/com/clra/web" />
  <filter token="${token.xml.contextRoot}"
          value="${deployment.xml.contextRoot}" />
  <filter token="${token.xml.member.targetNamespace}"
          value="${deployment.xml.member.targetNamespace}" />
  <filter token="${token.xml.member.implNamespace}"
          value="${deployment.xml.member.implNamespace}" />
  <filter token="${token.xml.member.intfNamespace}"
          value="${deployment.xml.member.intfNamespace}" />
  <filter token="${token.xml.member.hostAddrPort}"
          value="${deployment.xml.member.hostAddrPort}" />
  <filter token="${token.xml.member.hostURL}"
          value="${xml.member.hostURL}" />
  <filter token="${token.xml.member.hostPath}"
          value="${xml.member.hostPath}" />
  <copy file="${etc.xml.dir}/${xml-member-findAll-headers.file}"
        tofile="${javac.dest}/com/clra/web/${xml-member-findAll-headers.file}"
        filtering="true"/>
  <copy file="${etc.xml.dir}/${xml-member-findAll-content.file}"
        tofile="${javac.dest}/com/clra/web/${xml-member-findAll-content.file}"
        filtering="true"/>
  <copy file="${xml-member-wsdl.src}"
        tofile="${working.xml.dir}/member.wsdl" filtering="true"/>
  <java classname="org.apache.axis.wsdl.WSDL2Java"
        fork="true"
        failonerror="true"
        >
        <arg value="-o"/>
        <arg value="${java.source.dir}"/>
        <arg value="-s"/>
        <arg value="-S"/>
        <arg value="true"/>
        <arg value="--verbose"/>
        <arg value="-Nurn:${deployment.xml.member.targetNamespace}"/>
        <arg value="${xml.member.package}"/>
        <arg file="${working.xml.dir}/member.wsdl"/>
        <classpath>
          <pathelement location="${jar.lib.dir}/axis.jar" />
          <pathelement location="${jar.lib.dir}/commons-discovery.jar" />
          <pathelement location="${jar.lib.dir}/commons-logging.jar" />
          <pathelement location="${jar.lib.dir}/jaxrpc.jar" />
          <pathelement location="${jar.lib.dir}/saaj.jar" />
          <pathelement location="${jar.lib.dir}/wsdl4j.jar" />
          <pathelement location="${jar.lib.dir}/xercesImpl.jar" />
          <pathelement location="${jar.lib.dir}/xmlParserAPIs.jar" />
        </classpath>
  </java>
</target>

<!--
FIXME
Turn on deprecation after org.apache.struts.util.PropertyUtils
finds a new home in Jakarta Commons (or is removed from CLRA project)
-->
<target name="compile" depends="derived-source">
  <javac srcdir="${java.source.dir}"
         destdir="${javac.dest}"
         debug="on"
         optimize="off"
         deprecation="off"
         />
</target>

<target name="build" depends="init, compile" >
  <filter token="${token.dbtype}"
          value="${deployment.dbtype}" />
  <filter token="${token.jndi.contextRoot}"
          value="${deployment.jndi.contextRoot}" />
  <filter token="${token.jdbc.url}"
          value="${deployment.jdbc.url}" />
  <filter token="${token.jdbc.username}"
          value="${deployment.jdbc.username}" />
  <filter token="${token.jdbc.password}"
          value="${deployment.jdbc.password}" />
  <filter token="${token.mail.server}"
          value="${deployment.mail.server}" />
  <filter token="${token.mail.serverType}"
          value="${deployment.mail.serverType}" />
  <filter token="${token.mail.membership}"
          value="${deployment.mail.membership}" />
  <filter token="${token.mail.support}"
          value="${deployment.mail.support}" />
  <copy todir="${javac.dest}" filtering="true">
    <fileset dir="${java.source.dir}" includes="**/*.properties"/>
    <fileset dir="${java.source.dir}" includes="**/*.xsl"/>
  </copy>
</target>


<!-- ================================================================= -->
<!-- Remove all generated files.                                       -->
<!-- ================================================================= -->
<target name="clean" depends="init">
  <delete file="test-clra.log" />
  <delete file="test-clra.log.1" />
  <delete file="test-clra.log.2" />
  <delete file="test-clra.log.3" />
  <delete dir="${distrib.dir}/" />
  <delete dir="${working.dir}/" />
  <delete dir="${wsdl2java.dest}/beans" />
  <delete file="${wsdl2java.dest}/IMemberXmlRpc.java" />
  <delete file="${wsdl2java.dest}/IMemberXmlRpcService.java" />
  <delete file="${wsdl2java.dest}/IMemberXmlRpcServiceLocator.java" />
  <delete file="${wsdl2java.dest}/MemberSoapBindingStub.java" />
  <delete file="${wsdl2java.dest}/MemberSoapBindingSkeleton.java" />
  <delete file="${wsdl2java.dest}/deploy.wsdd" />
  <delete file="${wsdl2java.dest}/findAll-request.http" />
  <delete file="${wsdl2java.dest}/undeploy.wsdd" />
</target>


<!-- ================================================================= -->
<!-- Remove the temporary manifest file, actual work is done in the    -->
<!-- dependencies.                                                     -->
<!-- ================================================================= -->  
<target name="jar"
        depends="app-ejb.jar, app-war.jar">
   <delete file="${working.dir}/manifest.mf"/>
</target>

<target name="prejar" depends="build">
  <mkdir dir="${jar.dest}"/>
  <mkdir dir="${working.dir}"/>
  <filter token="app-version" value="${deployment.app.version}" />
  <copy file="${manifest.src}" tofile="${working.dir}/manifest.mf" 
        filtering="true"/>
</target>


<!-- ================================================================= -->
<!-- Create and deploy app-ejb.jar                                     -->
<!-- ================================================================= -->
<target name="app-ejb.jar" depends="prejar">
  <delete file="${jar.dest}/${file.app.ejb-jar}"/>
  <mkdir dir="${working.ejb.dir}"/>
  <mkdir dir="${working.ejb.dir}/META-INF"/>
  <filter token="${token.jndi.contextRoot}"
          value="${deployment.jndi.contextRoot}" />
  <copy todir="${working.ejb.dir}/META-INF/" filtering="true">
    <fileset dir="${etc.dir}">
      <include name="ejb-jar.xml" />
      <include name="jboss.xml" />
    </fileset>
  </copy>
  <jar jarfile="${jar.dest}/${file.app.ejb-jar}"
    manifest="${working.dir}/manifest.mf" >
    <fileset dir="${javac.dest}">
      <include name="${appstem}/member/*.class" />
      <include name="${appstem}/member/remote/*.class" />
      <include name="${appstem}/rowing/*.class" />
      <include name="${appstem}/rowing/remote/*.class" />
      <include name="${appstem}/visitor/*.class" />
      <include name="${appstem}/visitor/remote/*.class" />
      <include name="${appstem}/util/*.class" />
      <include name="${appstem}/member/*.properties" />
      <include name="${appstem}/rowing/*.properties" />
      <include name="${appstem}/visitor/*.properties" />
      <include name="${appstem}/rowing/remote/*.properties" />
      <include name="${appstem}/util/*.properties" />
    </fileset>
    <fileset dir="${working.ejb.dir}">
      <include name="META-INF/**" />
    </fileset>
  </jar>
</target>

<target name="app-ejb.deploy" depends="app-ejb.jar">
  <copy file="${jar.dest}/${file.app.ejb-jar}" todir="${env.JBOSS_DIST}/server/default/deploy" />
</target>

<target name="app-ejb.undeploy">
  <delete file="${env.JBOSS_DIST}/server/default/deploy/${file.app.ejb-jar}"/>
</target>


<!-- ================================================================= -->
<!-- Create app-war.jar, excluding tests, etc                          -->
<!-- ================================================================= -->
<target name="app-war.jar" depends="prejar">
  <delete file="${jar.dest}/${file.app.war-jar}"/>
  <mkdir dir="${working.war.dir}"/>
  <mkdir dir="${working.war.dir}/WEB-INF"/>
  <mkdir dir="${working.war.dir}/WEB-INF/classes"/>
  <mkdir dir="${working.war.dir}/WEB-INF/lib"/>
  <mkdir dir="${working.war.dir}/META-INF"/>
  <filter token="${token.jaas.url}"
          value="${deployment.jaas.url}" />
  <copy todir="${working.war.dir}/WEB-INF/" filtering="true">
    <fileset dir="${etc.dir}">
      <include name="web.xml" />
      <include name="jboss-web.xml" />
      <include name="clra.tld" />
      <include name="struts-config.xml" />
    </fileset>
    <fileset dir="${tld.lib.dir}">
      <include name="*.tld" />
    </fileset>
  </copy>
  <copy todir="${working.war.dir}/WEB-INF/classes">
    <fileset dir="${javac.dest}">
      <include name="${appstem}/member/*.class" />
      <include name="${appstem}/rowing/*.class" />
      <include name="${appstem}/util/**/*.class" />
      <include name="${appstem}/web/**/*.class" />
      <include name="${appstem}/**/*.properties" />
      <include name="${appstem}/**/*.xsl" />
      <include name="${appstem}/**/*.http" />
    </fileset>
    <fileset dir="${java.source.dir}">
      <include name="*.properties" />
    </fileset>
  </copy>
  <copy todir="${working.war.dir}/WEB-INF/lib">
    <fileset dir="${jar.lib.dir}">
      <include name="axis.jar" />
      <include name="jaxrpc.jar" />
      <include name="xalan-j241.jar" />
      <!-- include name="xercesImpl.jar" / -->
      <!-- include name="xmlParserAPIs.jar" / -->
      <include name="jboss-jaas.jar" />
      <include name="jaas.jar" />
      <include name="struts.jar" />
      <include name="commons-collections.jar" />
    </fileset>
  </copy>
  <jar jarfile="${jar.dest}/${file.app.war-jar}"
       manifest="${working.dir}/manifest.mf" >
       <fileset dir="${web.dir}">
           <include name="**/*.css" />
           <include name="**/*.gif" />
           <include name="**/*.jsp" />
       </fileset>
       <fileset dir="${working.war.dir}">
           <include name="WEB-INF/**/*" />
       </fileset>
  </jar>
</target>

<target name="app-war.deploy" depends="app-war.jar">
  <copy file="${jar.dest}/${file.app.war-jar}" todir="${env.JBOSS_DIST}/server/default/deploy" />
</target>

<target name="app-war.undeploy">
  <delete file="${env.JBOSS_DIST}/server/default/deploy/${file.app.war-jar}"/>
</target>


<!-- ================================================================= -->
<!-- Create xml-war.jar, excluding tests, etc                          -->
<!-- ================================================================= -->
<target name="xml-war.jar" depends="prejar">
  <delete file="${jar.dest}/${file.xml.war-jar}"/>
  <mkdir dir="${working.xml.dir}"/>
  <mkdir dir="${working.xml.dir}/WEB-INF"/>
  <mkdir dir="${working.xml.dir}/WEB-INF/classes"/>
  <mkdir dir="${working.xml.dir}/WEB-INF/lib"/>
  <mkdir dir="${working.xml.dir}/META-INF"/>
  <filter token="${token.xml.member.targetNamespace}"
          value="${deployment.xml.member.targetNamespace}" />
  <filter token="${token.jaas.url}"
          value="${deployment.jaas.url}" />
  <copy todir="${working.xml.dir}/WEB-INF/" filtering="true">
    <fileset dir="${etc.xml.dir}">
      <include name="web.xml" />
      <include name="server-config.wsdd" />
    </fileset>
    <fileset dir="${etc.dir}">
      <include name="jboss-web.xml" />
    </fileset>
  </copy>
  <copy todir="${working.xml.dir}/WEB-INF/classes">
    <fileset dir="${javac.dest}">
      <include name="${appstem}/member/*.class" />
      <include name="${appstem}/util/**/*.class" />
      <include name="${appstem}/xml/*.class" />
      <include name="${appstem}/xml/beans/*.class" />
      <include name="${appstem}/xml/security/*.class" />
      <include name="${appstem}/member/*.properties" />
      <include name="${appstem}/util/**/*.properties" />
      <include name="${appstem}/xml/*.properties" />
      <include name="${appstem}/xml/beans/*.properties" />
    </fileset>
    <fileset dir="${java.source.dir}">
      <include name="*.properties" />
    </fileset>
  </copy>
  <copy todir="${working.xml.dir}/WEB-INF/lib">
    <fileset dir="${jar.lib.dir}">
      <include name="axis.jar" />
      <include name="commons-collections.jar" />
      <include name="commons-discovery.jar" />
<!--      <include name="commons-logging.jar" /> -->
      <include name="jaas.jar" />
      <include name="jaxrpc.jar" />
      <include name="jboss-jaas.jar" />
      <include name="saaj.jar" />
      <include name="wsdl4j.jar" />
      <!-- include name="xercesImpl.jar" / -->
      <!-- include name="xmlParserAPIs.jar" / -->
    </fileset>
  </copy>
  <jar jarfile="${jar.dest}/${file.xml.war-jar}"
       manifest="${working.dir}/manifest.mf" >
       <fileset dir="${working.xml.dir}">
           <include name="WEB-INF/**/*" />
       </fileset>
  </jar>
</target>

<target name="xml-war.deploy" depends="xml-war.jar">
  <copy file="${jar.dest}/${file.xml.war-jar}" todir="${env.JBOSS_DIST}/server/default/deploy" />
</target>

<target name="xml-war.undeploy">
  <delete file="${env.JBOSS_DIST}/server/default/deploy/${file.xml.war-jar}"/>
</target>


<!-- ================================================================= -->
<!-- Create app-ear.jar, excluding tests, etc                          -->
<!-- ================================================================= -->
<target name="app-ear.jar" depends="app-war.jar,xml-war.jar,app-ejb.jar">
  <delete file="${jar.dest}/${file.app.ear-jar}"/>
  <mkdir dir="${working.ear.dir}"/>
  <mkdir dir="${working.ear.dir}/META-INF"/>
  <filter token="${token.web.contextRoot}"
          value="${deployment.web.contextRoot}" />
  <filter token="${token.file.war}"
          value="${file.app.war-jar}" />
  <filter token="${token.xml.contextRoot}"
          value="${deployment.xml.contextRoot}" />
  <filter token="${token.file.xml}"
          value="${file.xml.war-jar}" />
  <filter token="${token.file.ejb}"
          value="${file.app.ejb-jar}" />
  <copy todir="${working.ear.dir}/META-INF/" filtering="true">
    <fileset dir="${etc.dir}">
      <include name="application.xml" />
    </fileset>
  </copy>
  <jar jarfile="${jar.dest}/${file.app.ear-jar}"
    manifest="${working.dir}/manifest.mf" >
    <fileset dir="${working.ear.dir}">
      <include name="META-INF/application.xml" />
    </fileset>
    <fileset dir="${jar.dest}">
      <include name="${file.app.war-jar}"/>
      <include name="${file.xml.war-jar}"/>
      <include name="${file.app.ejb-jar}"/>
    </fileset>
  </jar>
</target>

<target name="app-ear.deploy" depends="app-ear.jar">
  <copy file="${jar.dest}/${file.app.ear-jar}" todir="${env.JBOSS_DIST}/server/default/deploy" />
</target>

<target name="app-ear.undeploy">
  <delete file="${env.JBOSS_DIST}/server/default/deploy/${file.app.ear-jar}"/>
</target>


<!-- ================================================================= -->
<!-- Execute JUnit tests                                               -->
<!-- ================================================================= -->
<target name="test" depends="app-ear.deploy">
  <echo message="${env.J2EE_HOME}/lib/j2ee.jar" />
  <echo message="Pause 10 seconds for JBoss autodeployer..." />
  <exec dir="${working.dir}" executable="/bin/sleep" os="Linux" >
    <arg line="10s"/>
  </exec>
  <mkdir dir="${working.dir}"/>
  <junit printsummary="yes" haltonfailure="yes" fork="yes" >
    <classpath>
      <pathelement location="${jar.lib.dir}/ant-1.3.jar" />
      <pathelement location="${jar.lib.dir}/ant-1.3-optional.jar" />
      <pathelement location="${jar.lib.dir}/axis.jar" />
      <pathelement location="${jar.lib.dir}/jaxrpc.jar" />
      <pathelement location="${jar.lib.dir}/junit.jar" />
      <pathelement location="${jar.lib.dir}/log4j.jar" />
      <pathelement location="${jar.lib.dir}/xalan-j241.jar" />
      <pathelement location="${jar.lib.dir}/xercesImpl.jar" />
      <pathelement location="${jar.lib.dir}/xmlParserAPIs.jar" />
      <pathelement location="${env.JBOSS_DIST}/client/jboss-j2ee.jar" />
      <pathelement location="${env.JBOSS_DIST}/client/jaas.jar" />
      <pathelement location="${env.JBOSS_DIST}/client/jbossmq-client.jar" />
      <pathelement location="${env.JBOSS_DIST}/client/jbosssx-client.jar" />
      <pathelement location="${env.JBOSS_DIST}/client/jboss-client.jar" />
      <pathelement location="${env.JBOSS_DIST}/client/jnp-client.jar" />
      <pathelement location="${env.JBOSS_DIST}/../tomcat/common/lib/servlet.jar" />
      <pathelement location="${env.JBOSS_DIST}/../catalina/common/lib/servlet.jar" />
      <pathelement location="${env.JBOSS_DIST}/lib/ext/oracle_jdbc_classes111.jar" />
      <pathelement location="${env.JBOSS_DIST}/lib/ext/mm.mysql-2.0.8-bin.jar" />
      <pathelement location="${env.JBOSS_DIST}/lib/ext/commons-collections.jar" />
      <pathelement location="${javac.dest}" />
    </classpath>
    <formatter type="plain" />
    <test name="test.clra.AllTestsLog4jConfig"
          haltonfailure="yes"
          outfile="${working.dir}/testresult" >
    </test>
  </junit>
</target>


<!-- ================================================================= -->
<!-- This target builds the javadoc files.                             -->
<!-- ================================================================= -->
<target name="javadoc" depends="app-war.jar">

<echo message="javadoc.dest == ${javadoc.dest}" />
<echo message="file.javadoc.war-jar == ${jar.dest}/${file.javadoc.war-jar}" />
<echo message="working.dir == ${working.dir}" />
<echo message="working.javadoc-war.dir == ${working.javadoc-war.dir}" />
<echo message="packaging.dir == ${packaging.dir}" />

  <mkdir dir="${javadoc.dest}" />
  <mkdir dir="${working.javadoc-war.dir}" />
  <mkdir dir="${packaging.dir}" />

  <copy file="${packaging.list}" todir="${packaging.dir}" />

  <copy todir="${javadoc.dest}">
    <fileset dir="${doc.dir}" includes="*.html" excludes="design*.html"/>
    <fileset dir="${doc.dir}" includes="**/*.jpg"/>
  </copy>
  <copy todir="${javadoc.dest}">
    <fileset dir="${java.source.dir}" includes="**/package.html"/>
  </copy>

  <javadoc sourcepath="${java.source.dir}" 
      destdir="${javadoc.dest}" 
      packagenames="com.clra.util,
                    com.clra.member,
                    com.clra.rowing,
                    com.clra.web"
      version="true"
      protected="true"
      author="true"
      use="true"                   
      overview="doc/overview.html"
      doctitle="clra version ${deployment.app.version}&lt;br&gt;API Specification"
      windowtitle="CLRA Version ${deployment.app.version}" 
      header="&lt;b&gt;CLRA ${deployment.app.version}&lt;/b&gt;" >
                   
      <link offline="true" 
            href="http://java.sun.com/products/jdk/1.2/docs/api"
            packageListLoc="${packaging.dir}"/>
  </javadoc>                
</target>

<target name="javadoc-war.jar" depends="prejar,javadoc">
  <delete file="${jar.dest}/${file.javadoc.war-jar}"/>
  <mkdir dir="${working.javadoc-war.dir}"/>
  <mkdir dir="${working.javadoc-war.dir}/WEB-INF"/>
  <mkdir dir="${working.javadoc-war.dir}/META-INF"/>
  <copy  file="${etc.dir}/javadoc-web.xml"
         tofile="${working.javadoc-war.dir}/WEB-INF/web.xml"/>
  <jar jarfile="${jar.dest}/${file.javadoc.war-jar}" >
       <fileset dir="${javadoc.dest}">
           <include name="**/*" />
       </fileset>
       <fileset dir="${working.javadoc-war.dir}">
           <include name="**/*" />
       </fileset>
  </jar>
</target>

<target name="javadoc-war.deploy" depends="javadoc-war.jar">
  <copy file="${jar.dest}/${file.javadoc.war-jar}"
        todir="${env.JBOSS_DIST}/server/default/deploy" />
</target>

<target name="javadoc-war.undeploy">
  <delete file="${env.JBOSS_DIST}/server/default/deploy/${file.javadoc.war-jar}"/>
</target>


<!-- ================================================================= -->
<!-- Build the whole tamale                                            -->
<!-- ================================================================= -->
<target name="all" depends="test,jar,javadoc" />


</project>
